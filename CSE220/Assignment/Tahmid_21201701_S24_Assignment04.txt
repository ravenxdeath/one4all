# ID: 21201701

class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p

class DoublyList:
  

  def __init__(self, a):
  # Creates a Non Dummy Headed Circular Doubly Linked List using the values from the given array a.
    # To Do
    # pass # Remove 
    self.head = Node(a[0], None, None)
    tail = self.head
    
    for i in range(1, len(a)):
        my_Node = Node(a[i], None, None)
        tail.next = my_Node
        my_Node.prev = tail
        tail = my_Node
        
    self.head.prev = tail
    tail.next = self.head
    

  
  # Counts the number of Nodes in the list and return the number
  # def countNode(self):
    # To Do
    # pass # Remove this line
  def countNode(self):
    count = 1
    head = self.head
    t = head.next
    
    while t != head:
        count += 1
        t = t.next
    return count
  
  
  # prints the elements in the list
  def forwardprint(self):
    # To Do
    # pass # Remove this line
    nowHead = self.head
    head = self.head
    t = head.next
    
    while t != head:
        print(nowHead.element, end = ", ")
        nowHead = t
        t = t.next
    print(nowHead.element)
    

  # prints the elements in the list backward
  def backwardprint(self):
    # To Do
    # pass # Remove this line
    head = self.head
    t = head.next
    last = None
    
    while t != head:
        last = t
        t = t.next
    
    while last != head:
        print(last.element, end = ", ")
        last = last.prev
    print(last.element)

  # returns the reference of the at the given index. For invalid index return None.
  def nodeAt(self, idx):
    # To Do
    # pass # Remove this 
    if idx >= self.countNode():
        print("index error")
    else:
        count = 0
        t = self.head
        while count != idx:
            count += 1
            t = t.next
        return t
      
  
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    # To Do
    # pass # Remove this line

    count = 0
    t = self.head
    while t.element != elem:
        if count == self.countNode():
            return -1
        count += 1
        t = t.next
    return count


  # inserts containing the given element at the given index Check validity of index. 
  def insert(self, elem, idx):
    # To Do
    # pass # Remove this line

    my_Node = Node(elem, None, None)
    if idx == 0:
        prev = self.head.prev
        my_Node.next = self.head
        self.head.prev = my_Node
        self.head = my_Node
        self.head.prev = prev
        prev.next = self.head
        
    else:
        prex = self.nodeAt(idx-1)
        my_Node.next = prex.next
        prex.next.prev = my_Node
        prex.next = my_Node
        my_Node.prev = prex
        
    
  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
  def remove(self, idx):
    # To Do
    # pass # Remove this line
    if idx == 0:
        removed = self.head
        self.head.prev.next = self.head.next
        self.head.next.prev = self.head
        self.head = self.head.next
        return f"{removed.element}"
      
    else:
        prex = self.nodeAt(idx-1)
        removed = prex.next
        prex.next = removed.next
        removed.next.prev = prex
        return f"{removed.element}"
    

  
      
print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40. 
h1.backwardprint() # This should print: 40,30,20,10. 
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that 
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.  

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40. 
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.  
h2.backwardprint() # This should print: 40,30,95,20,10,80.  

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.  
h3.backwardprint() # This should print: 70,60,50,40,30,20.  
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.  
h3.backwardprint() # This should print: 70,60,40,30,20.  
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60. 
h3.backwardprint() # This should print: 60,40,30,20.