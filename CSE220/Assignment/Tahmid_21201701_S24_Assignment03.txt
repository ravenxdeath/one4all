Name: Md. Tahmid Iqbal
id : 21201701
section: 24

# Run This cell Second
class Node:
    def __init__(self, e, n):
        self.element = e
        self.next = n
# To you coding in this cell
# class LinkedList:
  
#   def __init__(self, a):
#   #  Design the constructor based on data type of a. If 'a' is built in python list then
#   #  Creates a linked list using the values from the given array. head will refer
#   #  to the Node that contains the element from a[0]
#   #  Else Sets the value of head. head will refer
#   #  to the given LinkedList

#   # Hint: Use the type() function to determine the data type of a
#     self.head = None
#     # To Do
    
class LinkedList:
  def __init__(self, a):
      if type(a) == list:
          self.head = None
          for i in range(len(a)-1, -1, -1):
              self.head = Node(a[i], self.head)
      else:
          self.head = a.head
          

  # Traverse elements in the list.
  # This method is done for you. Do not change this method.
  def traverseList(self):
    s = ''
    temp = self.head
    while temp != None:
      if temp.next != None:
        s += str(temp.element) + " "
      else:
        s += str(temp.element)
      temp = temp.next
    return s
  
  # Count the number of nodes in the list and return the total number
  def countNode(self):
    # To Do
    # pass # Delete this line

    temp = self.head
    count = 0
    while temp:
        count += 1
        temp = temp.next
    return count  
  
  # returns the reference of the Node at the given index. For invalid index return None.
  def nodeAt(self, idx):
    # To Do
    # pass # Delete this line

    if idx < 0:
        return None
    curr = self.head
    i = 0
    while curr and i < idx:
        curr = curr.next
        i += 1
    return curr if curr else None
  
  # returns the element of the Node at the given index. For invalid idx return None.
  def get(self, idx):
    # To Do
    pass # Delete this line

    node = self.nodeAt(idx)
    return node.element if node else None
  
  
  # updates the element of the Node at the given index. 
  # Returns the old element that was replaced. For invalid index return None.
  # parameter: index, element
  # def set(self, idx, elem):
  #   # To Do
  #   pass # Delete this line
  def set(self, idx, elem):
      node = self.nodeAt(idx)
      if node:
          old_elem = node.element
          node.element = elem
          return old_elem
      else:
          return None
  # returns the index of the Node containing the given element.
  # if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    # To Do
    # pass # Delete this line

    curr = self.head
    i = 0
    while curr:
        if curr.element == elem:
            return i
        i += 1
        curr = curr.next
    return -1
  
  # returns true if the element exists in the List, return false otherwise.
  def contains(self, elem):
    # # To Do
    # pass # Delete this line

        return self.indexOf(elem) != -1

  # Makes a duplicate copy of the given List. Returns the reference of the duplicate list.
  # def copyList(self):
  #   # To Do
  #   pass # Delete this line
  def copyList(self):
      new_list = LinkedList(None)
      curr = self.head
      while curr:
          new_list.insert(curr.element, 0)
          curr = curr.next
      return new_list.reverseList()
    
  # Makes a reversed copy of the given List. Returns the head reference of the reversed list.
  def reverseList(self):
    # To Do
    # pass # Delete this line
    new_head = None
    curr = self.head
    while curr:
        new_head = Node(curr.element, new_head)
        curr = curr.next
    return LinkedList(new_head)
    
  # inserts Node containing the given element at the given index
  # Check validity of index. If invalid then print "Invalid Index"
  def insert(self, elem, idx):
    # To Do
    # pass # Delete this line
    if idx < 0:
        print("Invalid Index")
        return
    if idx == 0:
        self.head = Node(elem, self.head)
        return
    prev = self.nodeAt(idx-1)
    if prev:
        prev.next = Node(elem, prev.next)
    else:
        print("Invalid Index")

  # removes Node at the given index. returns element of the removed node.
  # Check validity of index. return None if index is invalid.
  def remove(self, idx):
    # # To Do
    # pass # Delete this line
      if idx < 0:
          return None
      if idx == 0:
          old_elem = self.head.element if self.head else None
          self.head = self.head.next if self.head else None
          return old_elem
      prev = self.nodeAt(idx-1)
      if prev and prev.next:
          old_elem = prev.next.element
          prev.next = prev.next.next
          return old_elem
      else:
          return None
        
  # Rotates the list to the left by 1 position.
  def rotateLeft(self):
    # To Do
    # pass # Delete this line
    if self.head and self.head.next:
        new_head = self.head.next
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = Node(self.head.element, None)
        self.head = new_head
  
  
  # Rotates the list to the right by 1 position.
  def rotateRight(self):
    # To Do
    # pass # Delete this line

    if self.head and self.head.next:
        curr = self.head
        while curr.next.next:
            curr = curr.next
        new_head = curr.next
        curr.next = None


# Do not modify this cell. Run this for test your written code.
print("////// Test 01 //////")
a1 = [10, 20, 30, 40]
h1 = LinkedList(a1) # Creates a linked list using the values from the array
# head will refer to the Node that contains the element from a[0]

returned_value = h1.traverseList() # This should return: 10 20 30 40
unittest.output_test(returned_value, '10 20 30 40')
print('------------------------------')
retured_value = h1.countNode() # This should return: 4
unittest.output_test(retured_value, 4)

print("////// Test 02 //////")
# returns the reference of the Node at the given index. For invalid idx return None.
myNode = h1.nodeAt(1)
retured_value = myNode.element # This should return: 20. In case of invalid index This will generate an Error.
unittest.output_test(retured_value, 20)
    
print("////// Test 03 //////")
# returns the element of the Node at the given index. For invalid idx return None.
val = h1.get(2)  # This should return: 30. In case of invalid index This will print None.
unittest.output_test(val, 30)
    
    
print("////// Test 04 //////")
    
# updates the element of the Node at the given index. 
# Returns the old element that was replaced. For invalid index return None.
# parameter: index, element
         
replaced_value = h1.set(1,85) # This should return: 20
unittest.output_test(replaced_value, 20)
print('------------------------------')
returned_value = h1.traverseList() # This should return: 10 85 30 40
unittest.output_test(returned_value, '10 85 30 40')
print('------------------------------')
replaced_value = h1.set(15,85) # This should return: None
unittest.output_test(replaced_value, None)
print('------------------------------')
returned_value = h1.traverseList() # This should return: 10 85 30 40
unittest.output_test(returned_value, '10 85 30 40')
    
print("////// Test 05 //////")
# returns the index of the Node containing the given element.
# if the element does not exist in the List, return -1.
index = h1.indexOf(40) # This should return: 3. In case of element that doesn't exists in the list this will print -1.
unittest.output_test(index, 3)
    
print("////// Test 06 //////")
# returns true if the element exists in the List, return false otherwise.
ask = h1.contains(40)  # This should return: True.
unittest.output_test(ask, True)
    
    
print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list
returned_value = h2.traverseList() # This should return: 10 20 30 40 50 60 70  
unittest.output_test(returned_value, '10 20 30 40 50 60 70')
print('------------------------------')

    
print("////// Test 08 //////")
a4 = [10,20,30,40,50]
h4 = LinkedList(a4) # uses the constructor where a is an built in list
returned_value = h4.traverseList() # This should return: 10 20 30 40 50  
unittest.output_test(returned_value, '10 20 30 40 50')
print('------------------------------')

print("////// Test 09 //////")
a6 = [10,20,30,40]
h6 = LinkedList(a6) # uses theconstructor where a is an built in list
returned_value = h6.traverseList() # This should return: 10 20 30 40  
unittest.output_test(returned_value, '10 20 30 40')
print('------------------------------c')   
# inserts Node containing the given element at the given index. Check validity of index.
h6.insert(85,0)
returned_value = h6.traverseList() # This should return: 85 10 20 30 40  
unittest.output_test(returned_value, '85 10 20 30 40')
print('------------------------------')
h6.insert(95,3)
returned_value = h6.traverseList() # This should return: 85 10 20 95 30 40  
unittest.output_test(returned_value, '85 10 20 95 30 40')
print('------------------------------')
h6.insert(75,6)
returned_value = h6.traverseList() # This should return: 85 10 20 95 30 40 75
unittest.output_test(returned_value, '85 10 20 95 30 40 75')
    
    
    
print("////// Test 10 //////")
a7 = [10,20,30,40,50,60,70]
h7 = LinkedList(a7) # uses theconstructor where a is an built in list
returned_value = h7.traverseList() # This should return: 10 20 30 40 50 60 70  
unittest.output_test(returned_value, '10 20 30 40 50 60 70')
print('------------------------------')  
# removes Node at the given index. returns element of the removed node.
# Check validity of index. return None if index is invalid.
    
removed_element = h7.remove(0) # This should return: 10
unittest.output_test(removed_element, '10')
print('------------------------------')
returned_value = h7.traverseList() # This should return: 20 30 40 50 60 70
unittest.output_test(returned_value, '20 30 40 50 60 70')
print('------------------------------')
removed_element = h7.remove(3) # This should return: 50
unittest.output_test(removed_element, '50')
print('------------------------------')
returned_value = h7.traverseList() # This should return: 20 30 40 60 70 
unittest.output_test(returned_value, '20 30 40 60 70')
print('------------------------------')
removed_element = h7.remove(4) # This should return: 70
unittest.output_test(removed_element, '70')
print('------------------------------')
returned_value = h7.traverseList() # This should return: 20 30 40 60 
unittest.output_test(returned_value, '20 30 40 60')
    
    
print("////// Test 11 //////")
a8 = [10,20,30,40]
h8 = LinkedList(a8) # uses theconstructor where a is an built in list
returned_value = h8.traverseList() # This should return: 10 20 30 40  
unittest.output_test(returned_value, '10 20 30 40')
print('------------------------------')    
# Rotates the list to the left by 1 position.
h8.rotateLeft()
returned_value = h8.traverseList() # This should return: 20 30 40 10  
unittest.output_test(returned_value, '20 30 40 10')
      
print("////// Test 12 //////")
a9 = [10,20,30,40]
h9 = LinkedList(a9) # uses the constructor where a is an built in list
returned_value = h9.traverseList() # This should return: 10 20 30 40
unittest.output_test(returned_value, '10 20 30 40')  
print('------------------------------')    
# Rotates the list to the right by 1 position.
h9.rotateRight()
returned_value = h9.traverseList() # This should return: 40 10 20 30
unittest.output_test(returned_value, '40 10 20 30')